@page "/ouseblog"
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
<Width xs="10" sm="8">
    <MudTextField Variant="Variant.Outlined" @bind-Value=searchContent 
    Placeholder="请输入您感兴趣的内容" Class="py-4"
    AdornmentIcon="@Icons.Material.Rounded.Search"  InputType=InputType.Search  OnBlur=Filter
    Adornment="Adornment.Start" T="string"></MudTextField>
    <div class="d-flex flex-column gap-4">
        @if(DisplayModels.Count==0)
        {
            <MudText Typo="Typo.h6" Color="Color.Warning" Align="Align.Center">暂时没有您想要的</MudText>
        }
        else
        foreach(var item in DisplayModels)
        {
            <BlogOverflow  BlogModel="item"></BlogOverflow>
        }
    </div>
</Width>
@code
{
    private string searchContent=string.Empty;
    private List<BlogModel> BlogModels { get; set; } = new List<BlogModel>();
    private List<BlogModel> DisplayModels { get; set; } = new List<BlogModel>();
    protected override async Task OnInitializedAsync()
    {
        var httpClient= HttpClientFactory.CreateClient(Settings.BlogUrl);
        BlogModels=await httpClient.GetFromJsonAsync<List<BlogModel>>("Blog.json")??new List<BlogModel>();
        DisplayModels = BlogModels;
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
    public void Filter(FocusEventArgs args)
    {
        DisplayModels = BlogModels.Where(blog =>
          new[] { blog.Name, blog.Label, blog.Description,blog.Weather }
              .Any(field => field?.Contains(searchContent,StringComparison.InvariantCultureIgnoreCase) ?? false)
      ).ToList();
        if(DisplayModels.Count==0)
        {
            Snackbar.Add("找不到捏!", Severity.Warning);
        }
        else
        {
            Snackbar.Add("找到了!", Severity.Success);
        }
    }
}