@page "/blogContent"
@using Microsoft.Extensions.Options
@using System.Text.RegularExpressions
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IOptions<AppSettingsModel> config
@if(string.IsNullOrEmpty(Value))
{
    <div style="width:100%;height:100vh " class="d-flex flex-column  justify-center align-center">
        <div class="load_6 "></div>
    </div>
}
else
{
    <div class="d-flex  gap-4">
        <MudDrawer @bind-Open=isOpen Class="" Style="color: var(--mud-palette-text-primary)" ClipMode="DrawerClipMode.Always" >

            <MudText Typo="Typo.h6" Align="Align.Center" Style="font-weight:900;" >目录</MudText>

            <MudTreeView Items="@TreeItems" >
                <ItemTemplate>
                    @{
                        var node = context as TocNode ?? new TocNode();
                    }
                    <MudTreeViewItem  Style="" TextClass="font_weight"   Items="node?.Children" Text="@node?.Text" OnClick="@(async () => await LoadToTarget(node?.Id))">
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </MudDrawer>

        <div class="mud-drawer-pos-left d-flex flex-column justify-center" style="height:100vh" @onclick="ToggleDrawer">
            <MudFab StartIcon="@Icons.Material.Outlined.MenuOpen" Style="position:fixed"   Size="Size.Large" OnClick="ToggleDrawer">
            </MudFab>
        </div>

        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudMarkdown Value="@Value" CodeBlockTheme="CodeBlockTheme.A11yDark" />
        </MudContainer>
    </div>
}

@code
{
    [SupplyParameterFromQuery(Name ="url")]
    public string BlogUrl { get; set; } = string.Empty;
    private string? Value { get; set; } 
    private List<TreeItemData<string>> TreeItems = new();
    private bool isInit;
    private string? url;
    private bool isOpen=true;
    private void ToggleDrawer() => isOpen = !isOpen;

    protected override async Task OnInitializedAsync()
    {
        url = Navigation.Uri;
        try
        {
            var httpClient = HttpClientFactory.CreateClient(Settings.BlogUrl);
            string result = await httpClient.GetStringAsync(BlogUrl);
            string blogName = BlogUrl.Contains('/') ? BlogUrl.Substring(0, BlogUrl.IndexOf('/')) : "default";
            string pattern = @"assets\\([^\s""')]+\.(png|jpg|jpeg|gif))";
            string replacement = $"{config.Value.Picture}/{blogName}/assets/$1";
            var matches = Regex.Matches(result, pattern);
            string updatedValue = Regex.Replace(result, pattern, replacement);
            Value = updatedValue;
        }
        catch(Exception ex)
        {
            Console.WriteLine("错误:"+ex.Message);
            Snackbar.Add("找不到资源!", Severity.Error);
            Navigation.NavigateTo("/ouseBlog");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInit)
        {
            var result = await JSRuntime.InvokeAsync<string>("getHeadingTagsString", ".mud-markdown-body");
            if (!string.IsNullOrEmpty(result))
            {
                isInit = true;
                TreeItems = Untilies.GetTreeTocItem(result);
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    public async Task LoadToTarget(string? id)
    {
        await JSRuntime.InvokeVoidAsync("scrollToSection", id);
    }
}

