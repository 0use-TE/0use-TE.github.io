@page "/blogContent"
@using Blazored.LocalStorage
@using Microsoft.Extensions.Options
@using System.Text.RegularExpressions
@using MudBlazor.Markdown.Toc
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject ILocalStorageService localStorage
@inject IOptions<AppSettingsModel> config
@if(string.IsNullOrEmpty(Value))
{
    <div style="width:100%;height:100vh " class="d-flex flex-column  justify-center align-center">
        <div class="load_6 "></div>
    </div>
}
else
{
    <div class="d-flex  gap-4">
        <MudContainer MaxWidth="MaxWidth.Medium">

            <MudMarkdown Value="@Value" CodeBlockTheme="CodeBlock" />
        </MudContainer>
        <div class="mud-drawer-pos-right d-flex justify-center align-center flex-column  " style="height:100vh" @onclick="ToggleDrawer">
            <MudFab StartIcon="@Icons.Material.Outlined.MenuOpen" Style="position:fixed" Size="Size.Large" OnClick="ToggleDrawer">
            </MudFab>
        </div>
        <MudDrawer @bind-Open=isOpen Class="" Style="color: var(--mud-palette-text-primary)" ClipMode="DrawerClipMode.Always" Anchor="MudBlazor.Anchor.Right" >
            <div class="pa-2">
                <MudText Align="Align.Center" Typo="Typo.h6" Style="font-weight:600">代码块主题</MudText>
            <MudSelect Variant="Variant.Outlined" @bind-Value="CodeBlock" OnClose="SelectCodeTheme">
                    @foreach (CodeBlockTheme item in Enum.GetValues(typeof(CodeBlockTheme)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </div>   
            <MudMarkdownToc   ScrollBehavior="Scroll.Smooth"></MudMarkdownToc>
   
        </MudDrawer>
  

    </div>
}

@code
{
    [SupplyParameterFromQuery(Name ="url")]
    public string BlogUrl { get; set; } = string.Empty;
    private string? Value { get; set; } 
    private string? url;
    private bool isOpen=true;
    private void ToggleDrawer() => isOpen = !isOpen;
    private CodeBlockTheme CodeBlock { get; set; } = CodeBlockTheme.A11yDark;
    private async Task SelectCodeTheme()
    {
        await localStorage.SetItemAsync<CodeBlockTheme>(OuseBlog.Misc.Settings.CodeBlockTheme, CodeBlock);
    }
    protected override async Task OnInitializedAsync()
    {
        url = Navigation.Uri;
        CodeBlock =await localStorage.GetItemAsync<CodeBlockTheme>(OuseBlog.Misc.Settings.CodeBlockTheme);
        try
        {
            var httpClient = HttpClientFactory.CreateClient(OuseBlog.Misc.Settings.BlogUrl);
            string result = await httpClient.GetStringAsync(BlogUrl);
            string blogName = BlogUrl.Contains('/') ? BlogUrl.Substring(0, BlogUrl.LastIndexOf('/')) : "default";
            string pattern = @"assets[\\/]([^\s""')]+\.(png|jpg|jpeg|gif))";
            string replacement = $"{config.Value.Picture}/{blogName}/assets/$1";
            var matches = Regex.Matches(result, pattern);
            string updatedValue = Regex.Replace(result, pattern, replacement);
            Value = updatedValue;
        }
        catch(Exception ex)
        {
            Console.WriteLine("错误:"+ex.Message);
            Snackbar.Add("找不到资源!", Severity.Error);
            Navigation.NavigateTo("/ouseBlog");
        }
    }
}

